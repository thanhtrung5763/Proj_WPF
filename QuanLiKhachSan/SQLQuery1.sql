CREATE DATABASE DB_QLKS
GO

USE DB_QLKS
GO

CREATE TABLE dbo.Employees (
	emp_id INT IDENTITY(1, 1) NOT NULL,
	firstname NVARCHAR(20) NULL,
	lastname NVARCHAR(20) NULL,
	email NVARCHAR(30) NULL,
	gender NVARCHAR(10) NULL,
	bdate DATETIME NULL,
	hdate DATETIME NULL,
	title NVARCHAR(20) NOT NULL,
	reportsto INT NULL,
	address NVARCHAR(30) NULL,
	photo IMAGE NULL
	
	CONSTRAINT [PK_Employees] PRIMARY KEY CLUSTERED ([emp_id] ASC),
	CONSTRAINT [FK_Employees_Employees] FOREIGN KEY ([reportsto]) REFERENCES [dbo].[Employees] ([emp_id]),
	CONSTRAINT [CK_bdate] CHECK(DATEDIFF(year,bdate,getdate()) >= 18 AND DATEDIFF(year,bdate,getdate()) <= 60)
)
GO
ALTER TABLE Employees
ADD phone NVARCHAR(50) NULL;
ALTER TABLE Employees
ADD FOREIGN KEY (title) REFERENCES dbo.Payment(title);

-- Get id identity from table when insert employee
DROP PROCEDURE [dbo].[AddEmployeeReturnIDwithoutput];  
GO 

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[AddEmployeeReturnIDwithoutput]
	@fn NVARCHAR(20),
	@ln NVARCHAR(20) ,
	@eml NVARCHAR(30),
	@gdr NVARCHAR(10),
	@bdt DATETIME,
	@hdt DATETIME,
	@tle NVARCHAR(20),
	@adrs NVARCHAR(30),
	@pic IMAGE NULL,
	@phn NVARCHAR(50),
    @id int output
AS
BEGIN
      SET NOCOUNT ON;
      INSERT INTO  Employees (LastName, FirstName, Email, Title, Gender, BDate, HDate, Address, Phone, Photo)
      VALUES (@ln, @fn, @eml, @tle, @gdr, @bdt, @hdt, @adrs, @phn, @pic)
      SET @id=SCOPE_IDENTITY()
      RETURN  @id
END
--

CREATE TABLE dbo.Accounts (
	acc_id INT IDENTITY(1, 1) NOT NULL,
	username NVARCHAR(30) NOT NULL,
	password NVARCHAR(30) NOT NULL
	
	CONSTRAINT [PK_Accounts] PRIMARY KEY CLUSTERED ([acc_id] ASC)
)
GO
CREATE TABLE dbo.EmployeeAccounts (
	acc_id	INT NOT NULL,
	emp_id INT NOT NULL

	CONSTRAINT [PK_EmployeeAccounts] PRIMARY KEY NONCLUSTERED ([acc_id] ASC, [emp_id] ASC),
    CONSTRAINT [FK_EmployeeAccounts_Employees] FOREIGN KEY ([emp_id]) REFERENCES [dbo].[Employees] ([emp_id]),
    CONSTRAINT [FK_EmployeeAccounts_Accounts] FOREIGN KEY ([acc_id]) REFERENCES [dbo].[Accounts] ([acc_id])
)
GO

SELECT Accounts.acc_id, Employees.title
FROM Accounts, Employees, EmployeeAccounts
WHERE Accounts.acc_id = EmployeeAccounts.acc_id AND Employees.emp_id = EmployeeAccounts.emp_id

--ROOMS
CREATE TABLE dbo.RoomTypes (
	room_type_id INT NOT NULL,
	room_type_name NVARCHAR(30) NULL,
	room_capacity INT NULL,
	room_num_beds INT NULL,
	room_price INT NULL,
	CONSTRAINT [PK_RoomTypes] PRIMARY KEY CLUSTERED ([room_type_id] ASC)
)
GO

insert into dbo.RoomTypes (room_type_id, room_type_name, room_capacity, room_num_beds, room_price) values (1, 'Single', 1, 1, 300000)
insert into dbo.RoomTypes (room_type_id, room_type_name, room_capacity, room_num_beds, room_price) values (2, 'Double', 2, 2, 500000)
insert into dbo.RoomTypes (room_type_id, room_type_name, room_capacity, room_num_beds, room_price) values (3, 'Suite', 4, 4, 900000)
GO




CREATE TABLE dbo.RoomStatus (
	status_id BIT NOT NULL,
	status_name NVARCHAR(30) NULL
	CONSTRAINT [PK_RoomStatus] PRIMARY KEY CLUSTERED ([status_id] ASC)
)
GO
INSERT INTO dbo.RoomStatus (status_id, status_name) VALUES (0, 'Empty');
INSERT INTO dbo.RoomStatus (status_id, status_name) VALUES (1, 'Full');
CREATE TABLE dbo.Rooms (
	room_id INT IDENTITY(1, 1) NOT NULL,
	room_type_id INT NULL,
	status_id BIT
	
	CONSTRAINT [PK_Rooms] PRIMARY KEY CLUSTERED ([room_id] ASC),
	CONSTRAINT [FK_Rooms_RoomTypes] FOREIGN KEY ([room_type_id]) REFERENCES [dbo].[RoomTypes] (room_type_id),
	CONSTRAINT [FK_Rooms_RoomStatus] FOREIGN KEY ([status_id]) REFERENCES [dbo].[RoomStatus] (status_id),
)
GO

insert into Rooms (room_type_id, status_id) values (1, 0);
insert into Rooms (room_type_id, status_id) values (3, 0);
insert into Rooms (room_type_id, status_id) values (3, 0);
insert into Rooms (room_type_id, status_id) values (2, 0);
insert into Rooms (room_type_id, status_id) values (1, 0);
GO

--DGV ROOMS
Select room_id, room_type_name, room_capacity, room_num_beds, room_price, status_name
FROM Rooms, RoomTypes, RoomStatus
WHERE Rooms.room_type_id = RoomTypes.room_type_id and Rooms.status_id = RoomStatus.status_id
GO
Select room_capacity, room_num_beds, room_price 
                FROM RoomTypes 
                WHERE room_type_id = 1
--
--END ROOMS

DBCC CHECKIDENT ('Employees', RESEED, 1)  
DBCC CHECKIDENT ('Accounts', RESEED, 1)  
INSERT INTO Accounts VALUES ('admin', 1)
INSERT INTO EmployeeAccounts VALUES(1, 1)
INSERT INTO Employees VALUES ('Thanh', 'Trung', 'thanhtrung5763@gmail.com', 'Male', '2001-10-19', '2021-04-06', 'Admin', NULL, 'BH', NULL, '576-245-123')
INSERT INTO Accounts VALUES ('t', 1)
INSERT INTO EmployeeAccounts VALUES(3, 3)

INSERT INTO Employees VALUES ('Tuan', 'Tran', 'tuant3883@gmail.com', 'Male', '2001-10-19', '2021-04-06', 'Janitor', NULL, 'BH', 0xFFD8FFE000104A46494600010101000000000000FFE100764578696600004D4D002A00000008000187690004000000010000001A00000000000192860007000000420000002C00000000554E49434F4445000043006F006D00700072006500730073006500640020006200790020006A007000650067002D007200650063006F, '574-243-183')

Select Rooms.room_type_id, room_type_name From Rooms, RoomTypes Where Rooms.room_type_id = RoomTypes.room_type_id;
Delete From Rooms Where room_type_id = 7
Delete From RoomTypes Where room_type_name = 'President'


Create Table dbo.Shifts (
	set_id INT NOT NULL,
	shift_id INT  NOT NULL,
	shift_name NVARCHAR(30) NULL,
	time_start Time NULL,
	time_end Time NULL,
	num_manager INT NULL,
	num_receptionist INT NULL,
	num_janitor INT NULL

	CONSTRAINT [PK_Shifts] PRIMARY KEY CLUSTERED ([set_id], [shift_id] ASC)
)
GO
Select * From shifts
Drop table dbo.shifts
delete from dbo.shifts
Select * From Employees Where title='Manager'

Create Table dbo.Schedules (
	schedule_id INT NOT NULL,
	set_id INT NOT NULL,
	emp_id INT NOT NULL,
	firstname NVarChar(20) NULL,
	lastname NVarChar(20) NULL,
	title NVarChar(30) NULL,
	date_start DateTime NULL,
	date_end DateTime NULL,
	Monday NVarChar(20) NUll,
	Tuesday NVarChar(20) NUll,
	Wednesday NVarChar(20) NUll,
	Thursday NVarChar(20) NUll,
	Friday NVarChar(20) NUll,
	Saturday NVarChar(20) NUll,
	Sunday NVarChar(20) NUll
	
	
)
GO
Delete From dbo.Schedules
DROP TAble dbo.Schedules

Select * From dbo.Schedules

Select Count(distinct schedule_id) From dbo.Schedules


CREATE TABLE [dbo].[CheckInOut] (
    [emp_id]       INT          NULL,
    [day]		 DATE			NULL,
    [shift_name] NVARCHAR(10)	NULL,
	[time_start] TIME(7)		NULL,
	[time_end]	 TIME(7)		NULL,
    [time_in]	 TIME (7)		NULL,
    [time_out]   TIME (7)		NULL,
    FOREIGN KEY ([emp_id]) REFERENCES [dbo].[Employees] ([emp_id]),
);
Alter table CheckInOut
Add time_worked TIME(7) NULL
drop table CheckInOut

Select Count(distinct schedule_id) From dbo.Schedules Where set_id=1
delete from dbo.schedules
Select * From Shifts Where set_id = 3

Select * From CheckInOut 
Delete From CheckInOut 


-- Salary
Create table dbo.Payment (
	title NVarchar(20) NOT NULL,
	salary int NULL

	Constraint [PK_Payment] PRIMARY KEY  CLUSTERED (title ASC)
)
Go
insert into dbo.Payment(title) Values ('admin');
insert into dbo.Payment Values ('manager', 80000)
insert into dbo.Payment Values ('receptionist', 60000)
insert into dbo.Payment Values ('janitor', 40000)

Select Employees.emp_id, firstname, lastname, day, shift_name, time_start, time_end, time_in, time_out, time_worked, DATEPART(hour, time_worked)*salary As Salary From (Select * From CheckInOut Where day='2021-05-23') C, Employees, Payment Where Employees.Title = Payment.Title And C.emp_id = Employees.emp_id
Select day, shift_name, time_start, time_end, time_in, time_out, time_worked, DATEPART(hour, time_worked)*salary As Salary From (Select * From CheckInOut Where day='2021-05-22') C, Employees, Payment Where Employees.Title = Payment.Title And C.emp_id = Employees.emp_id
SELECT * FROM Accounts WHERE acc_id=(SELECT acc_id FROM EmployeeAccounts WHERE emp_id=1)

select * From EmployeeAccounts

Create table dbo.Guest (
	guest_id INT NOT NULL,
	username NVARCHAR(30) NOT NULL,
	password NVARCHAR(30) NOT NULL,
	firstname NVARCHAR(20) NULL,
	lastname NVARCHAR(20) NULL,
	phone NVARCHAR(15) NULL,
	photo IMAGE NULL
	CONSTRAINT [PK_Guest] PRIMARY KEY CLUSTERED (guest_id ASC)
)
insert into guest values(1, 'g1', 1, 'Thanh', 'Phan', '123-456-789', 0x89504E470D0A1A0A0000000D4948445200000060000000600806000000E29877380000000467414D410000B18F0BFC61050000088049444154785EED9C7B6C53551CC741212642A2F11F94201AC10D6214D862820A6483E136A053D89A61741821CE48D696C784AD052DD1081A459C8F41780FD80061881006243214504132DE4E446420C8786C1D8CC136B6FDFCFD4ADBDDDDAEBBF7B6F7DC7BBB9E262774F79EF37B7CBEBF73CE7DB075E9C23F9C0027C00970029C0027C00970029C0027C0091890407272F203A3468D8A1F3972E447D8B6622BC7568DAD111BB4D7121212E20C984A7885141F1FFF0C82FF0601BB02810E741CC7968657B6068A16ABB72F825D87AD592978617F3E0B8210152B773242BC110A78EF583E0B1408101717D70DC1E5AB015E64A3028558854BD9B8D8D8D8EE0A428A9CAE041F016D62005FBC415F423F362E84A8B610FC4A0DE00BC53881423C173925DE41A654911AC3F70A518BBE93225A04BACC44F80D3A094042DCC6185E8A5411BA2280033AC2F7CE848B8989898F449C085879130C00DF2B427EC40980F08F19488006BC127B346244C03BD4612CE1BF654E80557312A162ED58289A97D4EEB322B17FDC90DF8F180170F959A6B6005EE8E7D68C052831B56924860C7FE7224200A7D3791FC2A8940144129AB0D2C5D0C53FCB990938339FEAF422E0547F3E14F81D55BA94085233819E43757A0110BE45A900A14057B21CA1005F777A01E8C1981C01D4842E57049C9DDB2341807D810450B2A64B2D3752E703EC09273ABD0008FFBC500096952E25423B7B42652408D0E6658B1424D6E745B3F1462408705798346BC052F64502344682006DAEEFA500B13E2FDE8FB800A2BB582E80CA2521AE38D680A5ECF319A071C58B05892801A0A8DFE329C971778CBA09536CB0313A5AE5496F0C73041F8AA2AAAE2D1B0899E661BE8D586A89607DDE5B0C53D24640E5D28180315653ACC6A0A66214B03E7A13264709C2ED826870BC3DDA2D4220C0E5DF0E878F27F485F9A97DE1CFFC1101FB853A9E6298357934DC5A3DC01D9BA76D543175639882C2A89B8204A1798709F2B213038225F039898FB9DBFCB427140B20773CC540B10863C3EF9DEF864C2C80D4D2221760203B8AC7B7563F8951638CB255310A581FB5A54D95495CFDD0B24310A9FA4F07B104291EDF56800D2AA66E0C537475716F83F3ACB325E3142F2B52B326F8F3184BAB00D7616DFF3EC6A0A672149E2BA18DB4C6C28E312DC1036BFBCE37643B140BC55414B5A1D3C2176B89D08E860C4EBD9BB832956BCDF8E6107EA1810428343E319523849D2959061260AACAE919DF1CEC1EF7B46104D899D2DFF8C4184488021CD45D849DA6DF18A4161E26A124E54D030890111EB41844098733BBA3007FEB28C219288DEBC620B5F031899B71926E02EC328D0B1F520C2345010A7410A180614AE1651A4ACD3D5180631A8A700C76BDDC23BC28318E1676A7F44601FED14084B3E48B713AE169DE2302CB99708CC397A80DCF72C4624F2820DBE1599A3A440D05BD00B6057E65297BA9FA016DACEE053AA410DE2E61711780255D01D6F401D83A4CF9BB031A4363C906DA0A6F1A3A44EF1640D896F70058F724C0A61814045FD26FA7F7C9F4FB60D8E83B1DA373D46719F6158DD72185F076E927805810853F87370D1DA2E702E8005DE8920BC005D09980C6EE33B2B37B98AD8EF16956FB726CFF961FFDB1122EEF0738F125C09E49001B9EF1DB5803CE9282DEF7AE9A0E3B012AB6417959C945B249B6C907F9D2383DE3BA4BCDCA1D9066B32F40382E6CE06DD99FE6217DD1A7EE3F37503758024CA045B081FA883ED90BF20E086DE3F7DA54AB7DC978CBEC41C625C338B2546BEE1804B14F04C627001EBF7DA3F6D6753F9A820357F2F3A172D1A28EBAC08DDADA6AB2D5819F7D140BE3748D63DE6CCD8935DBECFB3B00E21321BFB0786F20BA04FFC4A041EED6910868A3548E2F2A8609D3EC31C621A57224B4EEE2B45F848936C90402E9D3E69E6F696969128B2084DF910838B6996CC8F5E78ECD96FB45A7DB23EEADF3B9C71580F0CD82BD87CA0E0905680F7E2011F61E2C3B148C4F1C536ECE9AFBACCA35A88F39CF954D5D90202073EE8236025C5DB1C2B7F478C17BFF2571841F1A1BAC5F1C5747B1EB434D25AF7875330913B91B02049A092D172E5F392704DB9E0862F897AE5EBB80639B43F4DD842264AA84435B33665BEE1482172200F752F461FECA369B7193CBE5370BE898F08363E46EBEC22BAFF6BEB7502EDAD20BD15B5A963D5985CA6F856173B8EA1B1AEBBC80EBCACAFC04A83B72C4C7BFA1B1F1B6D9E6A852437C8F8DA6548BC31422166D86A75BE6F4C3A06FAA98BC5B88EF4AF6ECF312AEDEBCD94F80EAE2629F00D4576DFF9453EAF41C63FF452DFA736466ABFD2706C94346B6B3DC4BF8F2C2857E02D031EF27E3BD79A758C480360F98CDE6FBB529E520BCE086358351E2EE5970F2CCD95304B9C262F113A0C26A75F3C73E2759C64039068186FD1073E6EC87307135D75DBF0D71E62779EE65E8B4C9E427C05F29296E01662EC863B1FC086371BD3ACDF9307BA20A3D207C27CBCAF3D8AE7755555F3F1913E327001DABA976D1739F3B1AC4F181423C6CBBD3AD3B5EF3D76890382CFE6AE9EFE21B30EFCF78EEA01631A00F9729D3F9205BAA0AAC634013354A1C5EB7CCAE3AEE79082714E2F8E0C1F08635E79A5671E0656EBA02446CBB62D2DF6B9538F9298E4FF05B828AE3474BDD50A97ADE6CB16F614B55A675F354674F8452AFA500B3A664D58A97A159532CAADF7B48E4544FB9CBC4C4AEDB049B638496F03DBE5AF60E7DD1370B7E1EFA02A459725579ECA128174BEE707664655A4EB5D9A72B0A5AF0DA3194719FA74FAAF7CE82CFD2331A42B115F4588B639A4C4CECBAA55973D7069D4008624CCCCAB9533624068E0C1902AF65CDEEE895A3AA6BBF30D754AB43FF5FF2C0470FBFEA2100F95C33E695E6B54926ED971E6FE158ECBFB02B6D99961144B95E02BCFBCE8C1A6A7AF9C757AC7FC8C4C4AE1B265FA91700FDFD3A2EB3232BD3B2D697A0FA436FFDBF4B94BB4C4CBC1B27C00970029C0027C00970029C0027C00970023E02FF0329F1AE4F4EEA648B0000000049454E44AE426082)
drop table guest
delete from guest where guest_id = 1
select * From Employees Where emp_id = 1

Create table dbo.Reservation (
	res_id INT NOT NULL,
	guest_id INT NOT NULL,
	room_id INT NOT NULL,
	cin_date_book DATE NOT NULL,
	cout_date_book DATE NOT NULL,

	cin_date DATE NULL,
	cout_date DATE NULL,

	Constraint [pk_reservation] primary key clustered(res_id asc),
	Constraint [fk_res_guest]  Foreign key (guest_id) References dbo.Guest(guest_id),
	Constraint [fk_res_Rooms]  Foreign key (room_id) References dbo.Rooms(room_id)
)
select * from Reservation
delete from reservation 
drop table reservation

update reservation set cout_date = null where res_id = 2
update rooms set status_id = 0 where room_id = 5

Create Table dbo.PaymentGuest (
	pay_id INT NOT NULL,
	res_id INT NOT NULL,

	overdue_money INT NULL
	Constraint [pk_payguest] primary key clustered(pay_id asc),
	Constraint [fk_payguest_res] Foreign key(res_id) References dbo.reservation(res_id)
)
insert paymentguest(res_id) values(2)
select * from paymentguest
delete from PaymentGuest
drop table PaymentGuest

Select res_id, Reservation.room_id, cin_date_book, cout_date_book, cin_date, cout_date, room_price From Reservation, RoomTypes, Rooms Where Reservation.room_id = Rooms.room_id And Rooms.room_type_id = RoomTypes.room_type_id And '2021-05-24' = cin_date_book
Select res_id, Reservation.room_id, cin_date_book, cout_date_book, cin_date, cout_date, room_price From Reservation, RoomTypes, Rooms Where Reservation.room_id = Rooms.room_id And Rooms.room_type_id = RoomTypes.room_type_id
Select cin_date_book, sum(room_price) as Total From Reservation, RoomTypes, Rooms Where Reservation.room_id = Rooms.room_id And Rooms.room_type_id = RoomTypes.room_type_id Group by cin_date_book;